"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from apideck_sdk import utils
from apideck_sdk.types import BaseModel
from typing import Optional, Union
from typing_extensions import TypeAliasType, TypedDict


class DetailNotFoundResponse2TypedDict(TypedDict):
    pass


class DetailNotFoundResponse2(BaseModel):
    pass


NotFoundResponseDetailTypedDict = TypeAliasType(
    "NotFoundResponseDetailTypedDict", Union[DetailNotFoundResponse2TypedDict, str]
)
r"""Contains parameter or domain specific information related to the error and why it occurred."""


NotFoundResponseDetail = TypeAliasType(
    "NotFoundResponseDetail", Union[DetailNotFoundResponse2, str]
)
r"""Contains parameter or domain specific information related to the error and why it occurred."""


class NotFoundResponseData(BaseModel):
    status_code: Optional[float] = None
    r"""HTTP status code"""

    error: Optional[str] = None
    r"""Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)"""

    type_name: Optional[str] = None
    r"""The type of error returned"""

    message: Optional[str] = None
    r"""A human-readable message providing more details about the error."""

    detail: Optional[NotFoundResponseDetail] = None
    r"""Contains parameter or domain specific information related to the error and why it occurred."""

    ref: Optional[str] = None
    r"""Link to documentation of error type"""


class NotFoundResponse(Exception):
    r"""The specified resource was not found"""

    data: NotFoundResponseData

    def __init__(self, data: NotFoundResponseData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, NotFoundResponseData)
